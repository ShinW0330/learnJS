/**
 * while (while statement)
 * while(조건부분){
  동작부분
}
 */

//1. for문과 while문 비교해보기 

for (let i = 0; i < 11; i++) {
  console.log(`${i} 욱`);
  
}
let i =1; //2번 내용 
while(i <=10){
  console.log(`${i} 욱`);
  i++; // 3번 내용
}

/**
 * 가독성을 생각을 하면 for문을 사용하는 것이 좋다. '''1번
 * 반복 횟수를 저장할 변수를 while 문 밖에 만들어줘야한다. ''' 2번
 * while 에서는 for문 처럼 추가동작 부분이 없기 때문에 추가적으로 작성을 해야한다. ''' 3번
 */

 let j= 30;
 while(j%7 !== 0){ 
   j++;
 }
 console.log(j);
 
 /**
  * 7의 배수에서 가장 근접한 수를 뽑아낸다.
  * let a= 30;을 선언 했기 때문에 30~ 부터 시작하여 7의 배수를 찾는다.
  * while 문이 실행이 되어 30%7 의 나머지는 2이기 때문에 0과 같지 않기 때문에 
  * !== 0 0가 같지 않다 !== 부정 연산자를 사용했기 때문에 true 판정 그렇 기 때문에
  * while 동작 부분 a++ 가 실행이 되어 30에서 31이 된다. 
  * 이렇게 반복하여 35%7 는 나머지 0 이기 때문에 0과 같기 때문에 false 판정 
  * 그렇기 때문에 동작부분을 실행하지 않고 for문 밖으로 나가게 된다. 
  * 그런후 for문 아래의 console.log가 실행
  */

 /**
  * 이렇게 while문을 사용하는 이유는 전역 변수를 활용해서 반복문을 만들수 있으며 
  * for문은 for문 내부에서 반복문을 사용후 반복문이 종료가 된후에도
  * 변수를 외부에서 호출해서 사용을 못하지만
  * while문은 가능하기 때문에 상황에 맞추어 사용한다. 
  */

 //실습 1. 1~ 100 까지 홀수 while 문으로 뽑아보기 

let a = 1;
while(a<= 100){
  console.log(a);
  a = a+ 2;  
}

let b=1;
while (b <= 100) {
  if (b % 2 === 1) {
    console.log(b);
  }
  b++;
}

let c= 1;
while (c <= 50) {
  console.log(c * 2 - 1);
  c++;
}